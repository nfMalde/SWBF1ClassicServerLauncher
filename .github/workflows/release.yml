# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  push:
    branches: ["main"] 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Create Version
        id: create_version
        shell: pwsh
        run: |
          $tags = git tag -l
          # Filter tags matching the pattern "vX.Y"
          $filteredTags = $tags -match '^v\d+\.\d+'
          
          # Sort the filtered tags in version order
          $sortedTags = $filteredTags | Sort-Object { [Version]$_.TrimStart("v") } -Descending
          $highestTag  = "v1.0.0"
          if ($sortedTags) {
              # Select the highest tag
              $highestTag = $sortedTags[0]
          
          }
          
          Write-Host "newVersion=$($highestTag.TrimStart("v"))" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      # Runs a single command using the runners shell
      - name: Create Release Package
        env:
          NEW_VERSION: ${{ steps.create_version.ouputs.newVersion }}
        shell: pwsh
        run: .\.scripts\createRelease.ps1 -version  $env:NEW_VERSION -outputFolder .\release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          NEW_VERSION: ${{ steps.create_version.ouputs.newVersion }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            Changes in this Release v${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./release/SWBF1ClassicServerLauncher_${{ github.ref }}.zip
          asset_name: SWBF1ClassicServerLauncher_${{ github.ref }}.zip
          asset_content_type: application/zip
