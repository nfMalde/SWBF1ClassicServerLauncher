# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  push:
    branches: ["main"] 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Create Version
        id: create_version
        shell: pwsh
        run: .\.scripts\createVersion.ps1

      # Runs a single command using the runners shell
      - name: Create Release Package
        env:
          VERSION: ${{ steps.create_version.outputs.newversion }}
        shell: pwsh
        run: .\.scripts\createRelease.ps1 -version "${{ steps.create_version.outputs.newversion }}" -outputFolder .\release
      - name: Get-Changes
        id: get_changes
        shell: pwsh
        run: .\.scripts\parseChanges.ps1 -version "v${{ steps.create_version.outputs.newversion }}" -changelogFile .\CHANGELOG.md
      - name: Create Release and Tag
        id: create_release
        uses: actions/create-release@latest
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.create_version.outputs.newversion  }}
          release_name: Release v${{ steps.create_version.outputs.newversion  }}
          body: |
            # Release of v${{ steps.create_version.outputs.newversion  }} 
            ## Changes
            ${{ fromJSON(steps.get_changes.outputs.changes) }}
          draft: false
          prerelease: false   
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./release/SWBF1ClassicServerLauncher_${{ steps.create_version.outputs.newversion  }}.zip
          asset_name: SWBF1ClassicServerLauncher_${{ steps.create_version.outputs.newversion  }}.zip
          asset_content_type: application/zip
